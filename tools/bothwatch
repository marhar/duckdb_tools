#!/usr/bin/env python
# bothwatch -- watch both duckdb and postgres.

import os
import random
import subprocess
import sys
import sqlglot

def run_command(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE, text=True)
    result = [x.strip() for x in process.stdout.readlines()]
    if result and result[-1] == '':
        result.pop()
    return result


def equalize(array1, array2):
    # Determine the maximum length of the strings in the first array
    max_length = 0
    if array1:
        max_length = max(len(s) for s in array1)
    
    # Equalize lengths by appending empty strings
    max_len = max(len(array1), len(array2))
    array1.extend([''] * (max_len - len(array1)))
    array2.extend([''] * (max_len - len(array2)))
    return array1, array2    


def concatenate_as_columns(array1, array2):
    # Determine the maximum length of the strings in the first array
    max_length = 0
    if array1:
        max_length = max(len(s) for s in array1)
    
    # Equalize lengths by appending empty strings
    max_len = max(len(array1), len(array2))
    array1.extend([''] * (max_len - len(array1)))
    array2.extend([''] * (max_len - len(array2)))
    
    # Concatenate corresponding elements with appropriate padding for the first column
    concatenated_array = [f"{array1[i].ljust(max_length)} {array2[i]}" for i in range(max_len)]
    
    return concatenated_array


def main():

    duckfile = f'/tmp/both.{os.getpid()}.db'
    sqlfile = f'/tmp/both.{os.getpid()}.sql'
    tmpdb = f"tmp.{os.getpid()}.{random.randint(10000,99999)}"

    try:
        os.system(f'createdb {tmpdb}')
        final = []
        alld = []
        allp = []
        qqq={}
        stmtix = 1
        sql_text = open(sys.argv[1]).read()
        statements = sqlglot.parse(sql_text)
        for statement in statements:
            cmd=str(statement)
            alld.append(f'⟐{stmtix}')
            allp.append(f'⟐{stmtix}')
            qqq[f'⟐{stmtix}'] = cmd
            qqq[f'⟐{stmtix}'] = sqlglot.transpile(cmd, pretty=True)[0]
            stmtix += 1
            with open(sqlfile, 'w') as fd:
                print(cmd, file=fd)
            alld.extend(run_command(f'duckdb {duckfile} <{sqlfile}'))
            if statement.find(sqlglot.expressions.Select):
                allp.extend(['',''])
            allp.extend(run_command(f'psql --quiet {tmpdb} <{sqlfile}'))
            # if its SELECT, prepend ['','']
            alld,allp = equalize(alld, allp)
        final.extend(concatenate_as_columns(alld,allp))
        for line in final:
            if line and line.split()[0] in qqq:
                print(f'⟐{qqq[line.split()[0]]}')
            else:
                print(line)
    except Exception:
        raise
    finally:
        os.system(f'dropdb {tmpdb}')
        os.system(f"rm -f {duckfile} {sqlfile}")

if __name__ == '__main__':
    main()
