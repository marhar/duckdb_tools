#!/bin/sh
#
# duckwatch -- dumb "IDE-like" sql testing
# usage: duckwatch [-e] [sql-file] [db-file] [duckdb-executable]
#
# The duckdb cli has a nice editor for short queries, but not great for long or
# multi-line queries.
#
# Run this in one window, edit a sql file in another window.  You can have
# several queries/commands separated by semicolons.
#
# When you save the sql file, see the results here.
#
# examples:
#   duckwatch mytest.sql mygolden.timedb  # specify both sql file and db-file
#   duckwatch mytest.sql                  # fresh in-memory db only

trap 'exit 0' INT

if [[ $1. = -e. ]]; then
    shift
    START_EDITOR=1
else
    START_EDITOR=0
fi

SQLFILE=${1:-/tmp/duckwatch.sql}
DBFILE=${2:-:memory:}
DUCKDB=${3:-duckdb}

dosum () {
  stat -sL $1|awk '{print $10}'
}

if [[ $START_EDITOR -eq 1 ]]; then
    export SQLFILE
    osascript -e 'tell app "Terminal" to do script "cd '$(pwd)'; vi '${SQLFILE}';exit"' 
fi

while [[ ! -f $SQLFILE ]]; do
  echo waiting for $SQLFILE
  sleep 1
done
oldsum=$(dosum $SQLFILE)
sleep 1

while true; do

  clear
  echo SQLFILE=$SQLFILE DBFILE=$DBFILE DUCKDB=$DUCKDB
  echo --
  m4 ~/.time.m4 ~/.time.sql $SQLFILE|$DUCKDB $DBFILE

  # if you are using linux, this may be better
  #     inotifywait -e modify $SQLFILE
  newsum=$(dosum $SQLFILE)
  while [[ $oldsum = $newsum ]]; do
    sleep 1
    newsum=$(dosum $SQLFILE)
  done
  echo refreshing...
  oldsum=$(dosum $SQLFILE)

done
